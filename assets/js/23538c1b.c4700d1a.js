"use strict";(self.webpackChunkauxilor_docs=self.webpackChunkauxilor_docs||[]).push([[27757],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return h}});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),s=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(l.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(t),h=i,d=p["".concat(l,".").concat(h)]||p[h]||f[h]||r;return t?a.createElement(d,o(o({ref:n},u),{},{components:t})):a.createElement(d,o({ref:n},u))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=p;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var s=2;s<r;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4146:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return f}});var a=t(87462),i=t(63366),r=(t(67294),t(3905)),o=["components"],c={title:"Configuring an Effect Chain",sidebar_position:2},l=void 0,s={unversionedId:"effects/configuring-a-chain",id:"effects/configuring-a-chain",title:"Configuring an Effect Chain",description:"Configuring Effect Chains",source:"@site/docs/effects/configuring-a-chain.md",sourceDirName:"effects",slug:"/effects/configuring-a-chain",permalink:"/effects/configuring-a-chain",editUrl:"https://github.com/Auxilor/auxilor.github.io/tree/master/docs/effects/configuring-a-chain.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Configuring an Effect Chain",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Configuring an Effect",permalink:"/effects/configuring-an-effect"},next:{title:"Configuring a Condition",permalink:"/effects/configuring-a-condition"}},u={},f=[{value:"Configuring Effect Chains",id:"configuring-effect-chains",level:2},{value:"What is an Effect Chain?",id:"what-is-an-effect-chain",level:3},{value:"Reusable Chains",id:"reusable-chains",level:2},{value:"The Basic Layout",id:"the-basic-layout",level:3},{value:"Chain Config Example",id:"chain-config-example",level:3},{value:"Calling Your Chain",id:"calling-your-chain",level:3},{value:"Inline Chains",id:"inline-chains",level:2},{value:"The Basic Layout",id:"the-basic-layout-1",level:3},{value:"Example Inline Chain",id:"example-inline-chain",level:3},{value:"Run Types",id:"run-types",level:2},{value:"Weighted Random Chains",id:"weighted-random-chains",level:3}],p={toc:f};function h(e){var n=e.components,t=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"configuring-effect-chains"},"Configuring Effect Chains"),(0,r.kt)("h3",{id:"what-is-an-effect-chain"},"What is an Effect Chain?"),(0,r.kt)("p",null,"Effect chains are groups of effects that can be executed together. This is very useful if you want to create a chance-based effect with several components: chance is calculated independently on each trigger, so without chains, particles and messages could send when the effects don't activate, and vice-versa."),(0,r.kt)("p",null,"Effects in chains run isolated, so applying a mutator to one effect in the chain will apply it only to that effect - however, you can specify a mutator to the parent effect which will be applied to all\neffects in the chain. The same works for delays, e.g. if an effect in a chain has a delay of 2, it won't hold up other effects down the chain."),(0,r.kt)("p",null,"Effect chains are also useful to re-use more complex logic, via custom arguments that you can specify.\nThese work like regular placeholders, and you reference them in your chains with ",(0,r.kt)("inlineCode",{parentName:"p"},"%<id>%"),", for example ",(0,r.kt)("inlineCode",{parentName:"p"},"%size%")," if you\nhad a size argument."),(0,r.kt)("h2",{id:"reusable-chains"},"Reusable Chains"),(0,r.kt)("p",null,'One of the ways to create chains is in "chains.yml" in "/plugins/libreforge". This is great if you want to use chains more than once.'),(0,r.kt)("p",null,"Chains created here are universally accessible. You can use them in Enchants, Skills, Jobs or any other effect holders."),(0,r.kt)("p",null,"You don't need to specify triggers in your chain, these are handled by the ",(0,r.kt)("inlineCode",{parentName:"p"},"run_chain")," effect (see below)."),(0,r.kt)("h3",{id:"the-basic-layout"},"The Basic Layout"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"[!example]"),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"chains:\n  - id: <chain id>\n    effects:\n      - <effect 1>\n      - <effect 2>\n      - <effect 3>\n"))),(0,r.kt)("h3",{id:"chain-config-example"},"Chain Config Example"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"[!example]"," "),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"  - id: mining_effect\n    effects:\n      - id: play_sound\n        args:\n          sound: BLOCK_AMETHYST_CLUSTER_BREAK\n          pitch: 0.7\n          volume: 10\n      - id: spawn_particle\n        args:\n          particle: soul\n          amount: 10\n        mutators:\n          - id: translate_location\n            args:\n              add_x: 0.5\n              add_y: 0.5\n              add_z: 0.5\n"))),(0,r.kt)("p",null,"You can add or remove as many chains as you want. Then, if you want to call a chain, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"run_chain")," effect, like this:"),(0,r.kt)("h3",{id:"calling-your-chain"},"Calling Your Chain"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"[!example]"),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"effects:\n- id: run_chain\n  args:\n    chain: mining_effect # The ID of the chain\n    chance: 50 * (%player_health% / 20) # Example to demonstrate placeholders in config\n    cooldown: 2\n  triggers:\n    - mine_block\n  filters:\n    blocks:\n      - diamond_ore\n      - emerald_ore\n      - ancient_debris\n"))),(0,r.kt)("p",null,"Custom arguments can be specified like this:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"[!example]"),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"- id: run_chain\n  args:\n    chain: <chain id>  # Replace <chain id> with the actual chain ID\n    chain_args:\n      strength: %player_y% * 100  # You can put anything you want, doesn't only have to be numbers - you can use strings too!\n      # Add whichever arguments you use in your chain\n"))),(0,r.kt)("h2",{id:"inline-chains"},"Inline Chains"),(0,r.kt)("p",null,"If you don't want to re-use chains, or if you prefer having them specified directly under the effect, you can specify effects inline instead."),(0,r.kt)("h3",{id:"the-basic-layout-1"},"The Basic Layout"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"[!Example]"),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"effects:\n  - <effect 1>\n  - <effect 2>\n  - <effect 3>\ntriggers:\n  - mine_block\nargs:\n  every: 3 # You can use Optional Args here: https://plugins.auxilor.io/effects/configuring-an-effect#optional-arguments\n"))),(0,r.kt)("h3",{id:"example-inline-chain"},"Example Inline Chain"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"[!Example]"),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"effects:\n  - triggers:\n      - mine_block\n    filters:\n      blocks:\n        - diamond_ore\n        - emerald_ore\n        - ancient_debris\n    effects:\n      - id: play_sound\n        args:\n          sound: BLOCK_AMETHYST_CLUSTER_BREAK\n          pitch: 0.7\n          volume: 10\n      - id: spawn_particle\n        args:\n          particle: soul\n          amount: 10\n        mutators:\n          - id: translate_location\n            args:\n              add_x: 0.5\n              add_y: 0.5\n              add_z: 0.5\n")),(0,r.kt)("p",{parentName:"blockquote"},"Inline chains also support custom arguments, just like regular chains.")),(0,r.kt)("h2",{id:"run-types"},"Run Types"),(0,r.kt)("p",null,"Effect chains also support several run types:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"normal"),": All effects in the chain will be ran, sequentially, one after another"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"cycle"),": Only one effect will be ran, and it cycles through each effect each time the chain is triggered"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"random"),": Only one effect will be ran, chosen at random each time the chain is triggered")),(0,r.kt)("p",null,"To specify the run type, add the ",(0,r.kt)("inlineCode",{parentName:"p"},"run-type")," argument into config:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"[!example]"),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"effects:\n  - triggers:\n      - alt_click\n    effects:\n      - <effect 1>\n      - <effect 2>\n      - <effect 3>\n    args:\n      run-type: random # The run-type from above\n      chance: 30\n... filters, mutators, etc\n"))),(0,r.kt)("h3",{id:"weighted-random-chains"},"Weighted Random Chains"),(0,r.kt)("p",null,"Sometimes you may want certain chain effects to occur more frequently. Such as higher chance of a Iron Ingot being dropped, and a lower chance for a Diamond."),(0,r.kt)("p",null,"To do this, you must specify a weight within your chain effects:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"[!example]"),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"effects:\n\xa0 - triggers:\n\xa0 \xa0 \xa0 - mine_block\n\xa0 \xa0 args:\n\xa0 \xa0 \xa0 run-type: random\n\xa0 \xa0 effects:\n\xa0 \xa0 \xa0 - id: drop_item\n\xa0 \xa0 \xa0 \xa0 args:\n\xa0 \xa0 \xa0 \xa0 \xa0 item: diamond\n\xa0 \xa0 \xa0 \xa0 weight: 10 # The chance of this effect being run within a random chain\n\xa0 \xa0 \xa0 - id: drop_item\n\xa0 \xa0 \xa0 \xa0 args:\n\xa0 \xa0 \xa0 \xa0 \xa0 item: iron_ingot\n\xa0 \xa0 \xa0 \xa0 weight: 60\n"))),(0,r.kt)("p",null,"Weight is calculated as ",(0,r.kt)("inlineCode",{parentName:"p"},"<weight of element> / <sum of all weights>"),"."))}h.isMDXComponent=!0}}]);