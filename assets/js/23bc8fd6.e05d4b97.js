"use strict";(self.webpackChunkauxilor_docs=self.webpackChunkauxilor_docs||[]).push([[5819],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),h=a,y=c["".concat(s,".").concat(h)]||c[h]||m[h]||i;return n?o.createElement(y,r(r({ref:t},p),{},{components:n})):o.createElement(y,r({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var u=2;u<i;u++)r[u]=n[u];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},41027:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return m}});var o=n(87462),a=n(63366),i=(n(67294),n(3905)),r=["components"],l={title:"How to make an item",sidebar_position:4},s=void 0,u={unversionedId:"ecoshop/how-to-make-an-item",id:"ecoshop/how-to-make-an-item",title:"How to make an item",description:"What are items?",source:"@site/docs/ecoshop/how-to-make-an-item.md",sourceDirName:"ecoshop",slug:"/ecoshop/how-to-make-an-item",permalink:"/ecoshop/how-to-make-an-item",editUrl:"https://github.com/Auxilor/auxilor.github.io/tree/master/docs/ecoshop/how-to-make-an-item.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"How to make an item",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"How to make a category",permalink:"/ecoshop/how-to-make-a-category"},next:{title:"API",permalink:"/ecoshop/api"}},p={},m=[{value:"What are items?",id:"what-are-items",level:2},{value:"How do I make one?",id:"how-do-i-make-one",level:2},{value:"Simple buy-sell item",id:"simple-buy-sell-item",level:3},{value:"Command Items",id:"command-items",level:3},{value:"Effect Items",id:"effect-items",level:3},{value:"Extra Options",id:"extra-options",level:3}],c={toc:m};function h(e){var t=e.components,n=(0,a.Z)(e,r);return(0,i.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"what-are-items"},"What are items?"),(0,i.kt)("p",null,"Items are everything that can be bought or sold in the shop. They can be real items or\ncommands, single-purchase, limited purchase, buy only, sell only, both, they can be bought\nwith 2 different currency types - the point is, there's a lot of options to wrap your head around."),(0,i.kt)("h2",{id:"how-do-i-make-one"},"How do I make one?"),(0,i.kt)("h3",{id:"simple-buy-sell-item"},"Simple buy-sell item"),(0,i.kt)("p",null,"Let's start with a really simple shop item - if you're making a standard buy-sell shop, this\nis what most of your items will look like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"id: cooked_mutton\nitem: cooked_mutton\n\nbuy:\n  type: coins\n  value: 20\n  display: $%value%\n  amount: 32\n\nsell:\n  type: coins\n  value: 10\n  display: $%value%\n\ngui:\n  column: 4\n  row: 1\n  page: 1\n")),(0,i.kt)("p",null,"Let's break down each section:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"id"),": This is the internal ID of the item. Players don't see this, but it's important\nto use a unique ID for every item in all of your shops."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"item"),": This is the actual item we're selling. It supports custom items, enchantments,\ncustom names, amounts, reforges, et cetera - read\nmore ",(0,i.kt)("a",{parentName:"p",href:"https://plugins.auxilor.io/all-plugins/the-item-lookup-system"},"here")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"buy"),": If you want to make your item purchasable, this is where you specify the buy price.\nRead more about prices ",(0,i.kt)("a",{parentName:"p",href:"https://plugins.auxilor.io/all-plugins/prices"},"here"),", they're important\nto understand when making items."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"buy.amount"),": This is an optional feature where you specify the default amount of items\nto buy with quick-buy, and the default amount of items when opening the buy amount selection\nmenu. You still specify the value of only one item - this is just to give a default purchase\nquantity."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"sell"),": This works the same as buy, except now it's the sell price."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"gui"),": These are options for how the item will show in the category. Row is top to bottom,\ncolumn is left to right, and pages are self-explanatory."),(0,i.kt)("h3",{id:"command-items"},"Command Items"),(0,i.kt)("p",null,"Sometimes you want to run a command when a player buys an item rather than (or as well as)\ngiving the player a real item. It's really common now in servers to have multiple currency\nsetups and move things like ranks to be done from in-game shops, so let's see how you can\ndo that with EcoShop."),(0,i.kt)("p",null,"Of course, you can't sell a command, so they're buy-only."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'id: iron_rank\n\ncommand: #I Changed the commands: to command: because it doesnt work with an "s"\n  - lp user %player% parent set iron\n\nbuy:\n  value: "%ecomc_iron_price%"\n  type: crystals\n  display: "&b%value% Crystals \u2756"\n\n  require: "%actions_iron_buy_is_met%"\n\n  limit: 1\n\nalt-buy:\n  value: "%ecomc_iron_crystal_price%"\n  type: crystals\n  display: "&b%value% Crystals \u2756"\n\n  conditions: [ ]\n\ngui:\n  display:\n    item: diamond_chestplate\n    lore:\n      - "&fBuy &7&lIRON&r&f rank to get"\n      - "&fthe following benefits:"\n      - " &8\xbb&f &eExample Perk"\n    bottom-lore:\n      - "&e&oLeft click to buy with money,"\n      - "&e&oRight click to buy with &bCrystals \u2756&e&o!"\n  column: 5 # The column.\n  row: 3 # The row.\n  page: 2 # The page.\n\n  show-quick-buy-sell: false\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"commands"),": These are the commands to run when the player buys the item. You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"%player%")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"%amount%")," as placeholders."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"buy.value"),": You can use placeholders in values! Any PlaceholderAPI placeholder is allowed. And it\ngets a lot better than that - you can do ",(0,i.kt)("strong",{parentName:"p"},"math")," with this too. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"%player_y% * 100 - cos(%player_x%)"),"\nwould be totally allowed too. That's obviously a pretty weird price, but it's possible."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"buy.require"),": This is a mathematical expression that has to be met in order to be allowed to\nbuy this item. For example, you could do ",(0,i.kt)("inlineCode",{parentName:"p"},"%player_xp% >= 300")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"buy.conditions"),": Conditions that have to be met in order to buy this item, read\n",(0,i.kt)("a",{parentName:"p",href:"https://plugins.auxilor.io/effects/configuring-a-condition"},"here")," for more information!"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"buy.limit"),": The maximum amount of times a player can buy this item."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"alt-buy"),": This is a secondary buying option that you can right-click the item to use. Let's say\nyou have a dual currency system, you can make left-click cost money and right-click cost crystals,\nor you can make left-click cost gold ingots and right-click cost emeralds."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"gui.display"),": This is the item that's shown to players in the shop. Commands don't have any\nitem to automatically show, so you have to specify one. You can also specify a custom display item\nif you're selling items, but it's not necessary. You can optionally specify lore and bottom lore too,\nwhere bottom lore is shown under things like the buy price, quick buy options, etc."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"gui.show-quick-buy-sell"),": By default, quick buy / quick sell lore is shown on items. If you don't\nwant that for this item, you can disable it here."),(0,i.kt)("h3",{id:"effect-items"},"Effect Items"),(0,i.kt)("p",null,"Instead of just using commands, EcoShop also has full access to the\n",(0,i.kt)("a",{parentName:"p",href:"https://plugins.auxilor.io/effects/configuring-an-effect"},"effects system"),", so you can run\neffects when a player buys an item, or even just put effects themselves in the shop."),(0,i.kt)("p",null,"Like commands, these are unsellable."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'id: my_effect_item\n\neffects: [ ]\n\nbuy:\n  value: 65\n  type: crystals\n  display: "&b%value% Crystals \u2756"\n\ngui:\n  display:\n    item: nether_star\n    lore:\n      - "&fBuy me to do something cool!"\n  column: 6 # The column.\n  row: 3 # The row.\n  page: 2 # The page.\n\n  show-quick-buy-sell: false\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"effects"),": These are the effects that are ran when the player buys the item. Read\n",(0,i.kt)("a",{parentName:"p",href:"https://plugins.auxilor.io/effects/configuring-an-effect"},"here")," to learn more!"),(0,i.kt)("h3",{id:"extra-options"},"Extra Options"),(0,i.kt)("p",null,"There's some extra options that aren't shown in the above examples. If you want to explore all\nthe possible options, they're showcased in the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Auxilor/EcoShop/blob/main/eco-core/core-plugin/src/main/resources/categories/_example.yml"},"example category")))}h.isMDXComponent=!0}}]);