"use strict";(self.webpackChunkauxilor_docs=self.webpackChunkauxilor_docs||[]).push([[3440],{3905:function(t,e,n){n.d(e,{Zo:function(){return u},kt:function(){return g}});var r=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var c=r.createContext({}),s=function(t){var e=r.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},u=function(t){var e=s(t.components);return r.createElement(c.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,c=t.parentName,u=o(t,["components","mdxType","originalType","parentName"]),f=s(n),g=a,m=f["".concat(c,".").concat(g)]||f[g]||p[g]||i;return n?r.createElement(m,l(l({ref:e},u),{},{components:n})):r.createElement(m,l({ref:e},u))}));function g(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,l=new Array(i);l[0]=f;var o={};for(var c in e)hasOwnProperty.call(e,c)&&(o[c]=e[c]);o.originalType=t,o.mdxType="string"==typeof t?t:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},34670:function(t,e,n){n.r(e),n.d(e,{assets:function(){return u},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return p}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),l=["components"],o={},c="minecraft:nearest_attackable",s={unversionedId:"all-plugins/custom-entity-ai/all-target-goals/nearest_attackable",id:"all-plugins/custom-entity-ai/all-target-goals/nearest_attackable",title:"minecraft:nearest_attackable",description:"Allows an entity to attack the closest target within a given subset of specific target types",source:"@site/docs/all-plugins/custom-entity-ai/all-target-goals/nearest_attackable.md",sourceDirName:"all-plugins/custom-entity-ai/all-target-goals",slug:"/all-plugins/custom-entity-ai/all-target-goals/nearest_attackable",permalink:"/all-plugins/custom-entity-ai/all-target-goals/nearest_attackable",editUrl:"https://github.com/Auxilor/auxilor.github.io/tree/master/docs/all-plugins/custom-entity-ai/all-target-goals/nearest_attackable.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"minecraft:hurt_by",permalink:"/all-plugins/custom-entity-ai/all-target-goals/hurt_by"},next:{title:"minecraft:nearest_attackable_witch",permalink:"/all-plugins/custom-entity-ai/all-target-goals/nearest_attackable_witch"}},u={},p=[],f={toc:p};function g(t){var e=t.components,n=(0,a.Z)(t,l);return(0,i.kt)("wrapper",(0,r.Z)({},f,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"minecraftnearest_attackable"},(0,i.kt)("inlineCode",{parentName:"h1"},"minecraft:nearest_attackable")),(0,i.kt)("p",null,"Allows an entity to attack the closest target within a given subset of specific target types"),(0,i.kt)("h1",{id:"example-config"},"Example Config"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'- key: minecraft:nearest_attackable\n  priority: 0\n  args:\n    target: # The types of entities to attack\n      - zombie\n      - skeleton\n      - wither_skeleton\n    checkVisibility: true # If visibility should be checked\n    checkCanNavigate: true # If navigation should be checked\n    reciprocalChance: 5 # 1 in reciprocal chance (eg 1 in 20) of not activating on any given tick\n    targetFilter: "" # The filter for targets to match (entity lookup string)\n')))}g.isMDXComponent=!0}}]);